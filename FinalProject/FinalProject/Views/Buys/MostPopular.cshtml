@model FinalProject.Models.ViewModle
@using Microsoft.AspNet.Identity

<link rel="stylesheet" href="~/Content/style.css" type="text/css" media="screen" />

	@{
        //return the most popular item - when no user is logged in
        var mostpopular = Model.Buy.GroupBy(m => m.ProductsID).Select(g => new { ProductID = g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).First();

        //if user is authenticated - change mostpopular by the following algorithm
        if (@User.Identity.IsAuthenticated)
        {

            //return all buys from connected user
            var UserBuy = Model.Buy.Where(x => x.MembersID == @User.Identity.GetUserId());

            //join buy list with products list - to get products brand ( buys from specific user )
            var BrandUser = (from m in UserBuy
                             join p in Model.Product on m.Products.ID equals p.ID
                             select m).ToList();

            //join buy list with products list - to get products brand ( all buys )
            var BrandGeneral = (from m in Model.Buy
                                join p in Model.Product on m.Products.ID equals p.ID
                                select m).ToList();

            if (UserBuy.Count() != 0)
            {

                //return the brand that the user bought the most
                var countbrand = BrandUser.GroupBy(m => m.Products.Brand).Select(g => new { brand = g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).First();

                //return the most popular item of this brand
                mostpopular = BrandGeneral.Where(b => b.Products.Brand == countbrand.brand).GroupBy(m => m.ProductsID).Select(g => new { ProductID = g.Key, Count = g.Count() }).OrderByDescending(x => x.Count).First();
            }
        }

        var group = Model.Product.Where(x => x.ID == mostpopular.ProductID).Select(x => new
        {
            x.ID,
            x.ProductName,
            x.Image,
            x.Inches,
            x.Price,
            x.RefreshRate,
            x.Resolution,
            x.Brand,
            x.Description,
            x.Panel
        }).First();

		<!-- It's likely you'll need to link the card somewhere. You could add a button in the info, link the titles, or even wrap the entire card in an <a href="..."> -->
        <MostP>

                <div class="product-card">
                    <div class="product-image">
                        <img src="@group.Image" width="200" height="150">
                    </div>
                    <div class="product-info">
                        <h2>@group.ProductName</h2>
                        <h3>
                            Description - @group.Description<br>
                            Brand - @group.Brand<br>
                            Inches - @group.Inches<br>
                            Resolution - @group.Resolution<br>
                            RefreshRate - @group.RefreshRate<br>
                            Panel - @group.Panel<br>
                            Price - @group.Price
                        </h3>

                        <h7>Recommended for you!</h7>
                    </div>
                    <p>
                        <button class="button button1" onclick="location.href='@Url.Action("CreateBuy", "Buys", new { id = @group.ID })'">BUY!</button>
                    </p>
      
                </div>

        </MostP>
        <hr>
    }
