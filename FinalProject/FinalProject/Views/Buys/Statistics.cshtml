@model IEnumerable<FinalProject.Models.Buys>
@{
	ViewBag.Title = "Statistics";
}

<h2>Statistics</h2>

<h2>Number of sales per product</h2>
<div id='dashboard2'></div>

<h2>Sum of sales per brand</h2>
<div id='dashboard3'></div>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript">
	function dashboard(id, jData) {
		var barColor = '#3366cc';

		// compute total for each state.
		jData.forEach(function (d) { d.total = d.freq; });

		// function to handle histogram.
		function histoGram(jD) {
			var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };
			hGDim.w = 500 - hGDim.l - hGDim.r,
				hGDim.h = 300 - hGDim.t - hGDim.b;

			//create svg for histogram.
			var hGsvg = d3.select(id).append("svg")
				.attr("width", hGDim.w + hGDim.l + hGDim.r)
				.attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
				.attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

			// create function for x-axis mapping.
			var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
				.domain(jD.map(function (d) { return d[0]; }));

			// Add x-axis to the histogram svg.
			hGsvg.append("g").attr("class", "x axis")
				.attr("transform", "translate(0," + hGDim.h + ")")
				.call(d3.svg.axis().scale(x).orient("bottom"));

			// Create function for y-axis map.
			var y = d3.scale.linear().range([hGDim.h, 0])
				.domain([0, d3.max(jD, function (d) { return d[1]; })]);

			// Create bars for histogram to contain rectangles and freq labels.
			var bars = hGsvg.selectAll(".bar").data(jD).enter()
				.append("g").attr("class", "bar");

			//create the rectangles.
			bars.append("rect")
				.attr("x", function (d) { return x(d[0]); })
				.attr("y", function (d) { return y(d[1]); })
				.attr("width", x.rangeBand())
				.attr("height", function (d) { return hGDim.h - y(d[1]); })
				.attr('fill', barColor)
				.on("mouseover", mouseover)// mouseover is defined below.
				.on("mouseout", mouseout);// mouseout is defined below.

			//Create the frequency labels above the rectangles.
			bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
				.attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
				.attr("y", function (d) { return y(d[1]) - 5; })
				.attr("text-anchor", "middle");

			function mouseover(d) // utility function to be called on mouseover.
			{
				// filter for selected state.
				var st = jData.filter(function (s) { return s.State == d[0]; })[0],
					nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });
			}

			function mouseout(d) { }    // utility function to be called on mouseout.

			// create function to update the bars. This will be used by pie-chart.
			hG.update = function (nD, color) {
				// update the domain of the y-axis map to reflect change in frequencies.
				y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

				// Attach the new data to the bars.
				var bars = hGsvg.selectAll(".bar").data(nD);

				// transition the height and color of rectangles.
				bars.select("rect").transition().duration(500)
					.attr("y", function (d) { return y(d[1]); })
					.attr("height", function (d) { return hGDim.h - y(d[1]); })
					.attr("fill", color);

				// transition the frequency labels location and change value.
				bars.select("text").transition().duration(500)
					.text(function (d) { return d3.format(",")(d[1]) })
					.attr("y", function (d) { return y(d[1]) - 5; });
			}
			return hG;
		}


		// calculate total frequency by state for all segment.
		var sF = jData.map(function (d) { return [d.State, d.total]; });

		var hG = histoGram(sF); // create the histogram.

	}

	$.getJSON('/Buys/SalesGraph', function (data) {
		dashboard('#dashboard2', data);
	});

	

	function dashboard3(id, jData) {
		var barColor = '#33cc33';

		// compute total for each state.
		jData.forEach(function (d) { d.total = d.freq; });

		// function to handle histogram.
		function histoGram(jD) {
			var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };
			hGDim.w = 500 - hGDim.l - hGDim.r,
				hGDim.h = 300 - hGDim.t - hGDim.b;

			//create svg for histogram.
			var hGsvg = d3.select(id).append("svg")
				.attr("width", hGDim.w + hGDim.l + hGDim.r)
				.attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
				.attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

			// create function for x-axis mapping.
			var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
				.domain(jD.map(function (d) { return d[0]; }));

			// Add x-axis to the histogram svg.
			hGsvg.append("g").attr("class", "x axis")
				.attr("transform", "translate(0," + hGDim.h + ")")
				.call(d3.svg.axis().scale(x).orient("bottom"));

			// Create function for y-axis map.
			var y = d3.scale.linear().range([hGDim.h, 0])
				.domain([0, d3.max(jD, function (d) { return d[1]; })]);

			// Create bars for histogram to contain rectangles and freq labels.
			var bars = hGsvg.selectAll(".bar").data(jD).enter()
				.append("g").attr("class", "bar");

			//create the rectangles.
			bars.append("rect")
				.attr("x", function (d) { return x(d[0]); })
				.attr("y", function (d) { return y(d[1]); })
				.attr("width", x.rangeBand())
				.attr("height", function (d) { return hGDim.h - y(d[1]); })
				.attr('fill', barColor)
				.on("mouseover", function () {
					d3.select(this)
						.attr("fill", "red");
				})// mouseover is defined below.
				.on("mouseout", function () {
					d3.select(this)
						.attr("fill", "#33cc33");// mouseout is defined below.
				});
			//Create the frequency labels above the rectangles.
			bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
				.attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
				.attr("y", function (d) { return y(d[1]) - 5; })
				.attr("text-anchor", "middle");

			function mouseover(d) // utility function to be called on mouseover.
			{
				
			}

			function mouseout(d) { }    // utility function to be called on mouseout.

			// create function to update the bars. This will be used by pie-chart.
			hG.update = function (nD, color) {
				// update the domain of the y-axis map to reflect change in frequencies.
				y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

				// Attach the new data to the bars.
				var bars = hGsvg.selectAll(".bar").data(nD);

				// transition the height and color of rectangles.
				bars.select("rect").transition().duration(500)
					.attr("y", function (d) { return y(d[1]); })
					.attr("height", function (d) { return hGDim.h - y(d[1]); })
					.attr("fill", color);

				// transition the frequency labels location and change value.
				bars.select("text").transition().duration(500)
					.text(function (d) { return d3.format(",")(d[1]) })
					.attr("y", function (d) { return y(d[1]) - 5; });
			}
			return hG;
		}


		// calculate total frequency by state for all segment.
		var sF = jData.map(function (d) { return [d.State, d.total]; });

		var hG = histoGram(sF); // create the histogram.

	}
	$.getJSON('/Buys/SalesPerbrand', function (data) {
		dashboard3('#dashboard3', data);
	});


</script>

